version: 2.1

aliases:
  # Workflow filters
  - &filter-only-release
    branches:
      only: chore/test-release-pipeline
    tags:
      only: /^v[0-9]+(\.[0-9]+){2}(-.+|[^-.]*)$/
  - &filter-only-main
    branches:
      only: 
        - main
        - rc
        - fix-circleci
  - &filter-main-or-release
    branches:
      only:
        - main
        - fix-circleci
    tags:
      only: /^v[0-9]+(\.[0-9]+){2}(-.+|[^-.]*)$/

executors:
  base:
    docker:
      - image: cimg/base:stable
  node:
    docker:
      - image: cimg/node:16.10.0
  go:
    docker:
      - image: cimg/go:1.17
  e2e:
    docker:
      - image: srclosson/grafana-plugin-ci-e2e:latest
  grafana-build:
    docker:
      - image: grafana/build-container:1.4.3
  grafana-publish:
    docker:
      - image: grafana/grafana-ci-deploy:1.3.1

commands:
  install-grabpl:
    description: "Install Grafana build pipeline tool"
    steps:
      - run:
          name: "Install Grafana build pipeline tool"
          command: |
            VERSION=2.4.0
            curl -fLO https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v${VERSION}/grabpl
            chmod +x grabpl
            mv grabpl /tmp
                       
jobs:
  build-backend:
    description: "Build a certain variant of Grafana back-end binaries"
    parameters:
      edition:
        type: string
      variant:
        type: string
    executor: grafana-build
    steps:
      - run:
          name: Exit if enterprise and forked PR
          command: |
            if [[ "oss" == "enterprise" && -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
      - checkout
      - run:
          name: CI job started
          command: ./scripts/ci-job-started.sh
      - install-grabpl
      - run:
          name: Build Grafana backend
          command: |
            if [[ -n $CIRCLE_TAG ]]; then
              # A release build
              /tmp/grabpl build-backend --github-token --edition oss \
                --variants << parameters.variant >> $CIRCLE_TAG
            else
              # A main or PR build
              /tmp/grabpl build-backend --github-token "${GITHUB_GRAFANABOT_TOKEN}" --edition oss \
                --variants << parameters.variant >> --build-id $CIRCLE_WORKFLOW_ID
            fi
      - run:
          name: Move artifacts
          command: mkdir -p oss && mv bin oss/
      - persist_to_workspace:
          root: .
          paths:
            - oss/bin/*
      - run:
          name: CI job failed
          command: ./scripts/ci-job-failed.sh
          when: on_fail
      - run:
          name: CI job succeeded
          command: ./scripts/ci-job-succeeded.sh
          when: on_success

  build-frontend:
    description: "Build Grafana front-end artifacts"
    parameters:
      edition:
        type: string
    resource_class: large
    executor: grafana-build
    steps:
      - run:
          name: Exit if enterprise and forked PR
          command: |
            if [[ "oss" == "enterprise" && -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
      - checkout
      - restore_cache:
          keys:
            # Use own cache for front-end builds, since for some reason it can't be unpacked for parts of the
            # pipeline
            - v1-yarn-build-{{ checksum "yarn.lock" }}
            # Used if checksum fails
            - v1-yarn-build-
      - run:
          name: Increase node memory
          command: |
            export NODE_OPTIONS=--max_old_space_size=4096
      - run:
          name: CI job started
          command: ./scripts/ci-job-started.sh
      - install-grabpl
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile --no-progress
      - save_cache:
          key: v1-yarn-build-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: Build Grafana frontend
          command: |
            if [[ -n $CIRCLE_TAG ]]; then
              # A release build
              /tmp/grabpl build-frontend --github-token "${GITHUB_GRAFANABOT_TOKEN}" --edition oss $CIRCLE_TAG
            elif [[ $CIRCLE_BRANCH == "chore/test-release-pipeline" ]]; then
              # We're testing the release pipeline
              /tmp/grabpl build-frontend --github-token "${GITHUB_GRAFANABOT_TOKEN}" --edition oss 7.0.0-test
            else
              # A main or PR build
              /tmp/grabpl build-frontend --github-token "${GITHUB_GRAFANABOT_TOKEN}" --edition oss --build-id $CIRCLE_WORKFLOW_ID
            fi
      - run:
          name: Move artifacts
          command: mkdir oss && cp -r public oss/
      - persist_to_workspace:
          root: .
          paths:
            - oss/public/*
      - run:
          name: CI job failed
          command: ./scripts/ci-job-failed.sh
          when: on_fail
      - run:
          name: CI job succeeded
          command: ./scripts/ci-job-succeeded.sh
          when: on_success

  build-plugins:
    description: "Build internal Grafana plug-ins"
    parameters:
      edition:
        type: string
    executor: grafana-build
    steps:
      - run:
          name: Exit if enterprise and forked PR
          command: |
            if [[ "oss" == "enterprise" && -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
      - checkout
      - run:
          name: CI job started
          command: ./scripts/ci-job-started.sh
      - install-grabpl
      - run:
          name: Build internal Grafana plug-ins
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              # This is a forked PR, so don't sign as it requires an API secret
              /tmp/grabpl build-plugins --jobs 2 --edition oss
            else
              export GRAFANA_API_KEY=$GRAFANA_COM_API_KEY
              /tmp/grabpl build-plugins --jobs 2 --edition oss --sign --signing-admin
            fi
      - run:
          name: Move artifacts
          command: |
            mkdir -p oss/plugins-bundled
            mv plugins-bundled/dist oss/plugins-bundled/
      - persist_to_workspace:
          root: .
          paths:
            - oss/plugins-bundled/dist/*
      - run:
          name: CI job failed
          command: ./scripts/ci-job-failed.sh
          when: on_fail
      - run:
          name: CI job succeeded
          command: ./scripts/ci-job-succeeded.sh
          when: on_success

  shellcheck:
    executor: base
    steps:
      - checkout
      - run:
          name: CI job started
          command: ./scripts/ci-job-started.sh
      - install-grabpl
      - run:
          name: Install ShellCheck
          command: |
            VERSION=0.7.1
            CHKSUM=beca3d7819a6bdcfbd044576df4fc284053b48f468b2f03428fe66f4ceb2c05d9b5411357fa15003cb0311406c255084cf7283a3b8fce644c340c2f6aa910b9f
            curl -fLO http://storage.googleapis.com/grafana-downloads/ci-dependencies/shellcheck-v${VERSION}.linux.x86_64.tar.xz
            echo $CHKSUM shellcheck-v${VERSION}.linux.x86_64.tar.xz | sha512sum --check --strict --status
            tar xf shellcheck-v${VERSION}.linux.x86_64.tar.xz
            sudo mv shellcheck-v${VERSION}/shellcheck /usr/local/bin/
      - run:
          name: ShellCheck
          command: |
            /tmp/grabpl shellcheck
      - run:
          name: CI job failed
          command: ./scripts/ci-job-failed.sh
          when: on_fail
      - run:
          name: CI job succeeded
          command: ./scripts/ci-job-succeeded.sh
          when: on_success

  package-oss:
    executor: grafana-build
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: CI job started
          command: ./scripts/ci-job-started.sh
      - install-grabpl
      - run:
          name: Copy artifacts from workspace
          command: cp -r /tmp/workspace/oss/* .
      - run:
          name: Package Grafana
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo Using test GPG key pair since building a forked PR
              source scripts/build/gpg-test-vars.sh
            fi

            # Necessary for signing bundled plugins
            export GRAFANA_API_KEY=$GRAFANA_COM_API_KEY
            if [[ -n $CIRCLE_TAG ]]; then
              # A release build
              /tmp/grabpl package --github-token "${GITHUB_GRAFANABOT_TOKEN}" --jobs 2 --edition oss --sign $CIRCLE_TAG
            elif [[ $CIRCLE_BRANCH == "chore/test-release-pipeline" ]]; then
              # We're testing the release pipeline
              /tmp/grabpl package --github-token "${GITHUB_GRAFANABOT_TOKEN}" --jobs 2 --edition oss --sign v7.0.0-test
            elif [[ $CIRCLE_BRANCH == "main" ]]; then
              # A main build
              /tmp/grabpl package --github-token "${GITHUB_GRAFANABOT_TOKEN}" --jobs 2 --edition oss --sign --build-id $CIRCLE_WORKFLOW_ID
            elif [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              # A forked PR build, don't sign as it requires an API secret
              /tmp/grabpl package --github-token "${GITHUB_GRAFANABOT_TOKEN}" --jobs 2 --edition oss --build-id $CIRCLE_WORKFLOW_ID --variants \
                linux-x64,linux-x64-musl,osx64
            else
              # A non-forked PR build
              /tmp/grabpl package --github-token "${GITHUB_GRAFANABOT_TOKEN}" --jobs 2 --edition oss --sign --build-id $CIRCLE_WORKFLOW_ID --variants \
                linux-x64,linux-x64-musl,osx64
            fi
      - run:
          name: Move artifacts
          command: |
            mkdir -p oss
            mv dist oss/
      - persist_to_workspace:
          root: .
          paths:
            - oss/dist/*
      - run:
          name: CI job failed
          command: ./scripts/ci-job-failed.sh
          when: on_fail
      - run:
          name: CI job succeeded
          command: ./scripts/ci-job-succeeded.sh
          when: on_success

  publish-packages:
    description: "Publish packages"
    parameters:
      edition:
        type: string
    executor: grafana-publish
    steps:
      - run:
          name: Exit if forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: CI job started
          command: ./scripts/ci-job-started.sh
      - install-grabpl
      - run:
          name: Publish packages
          command: |
            cp -r /tmp/workspace/oss/dist .
            if [[ $CIRCLE_BRANCH == "chore/test-release-pipeline" ]]; then
              # We're testing the release pipeline
              /tmp/grabpl publish-packages --edition oss \
                --deb-db-bucket grafana-testing-aptly-db --deb-repo-bucket grafana-testing-repo --packages-bucket \
                grafana-downloads-test --rpm-repo-bucket grafana-testing-repo --simulate-release
            else
              /tmp/grabpl publish-packages --edition oss
            fi
      - run:
          name: CI job failed
          command: ./scripts/ci-job-failed.sh
          when: on_fail
      - run:
          name: CI job succeeded
          command: ./scripts/ci-job-succeeded.sh
          when: on_success

  build-docker-images:
    description: "Build/publish Docker images"
    parameters:
      edition:
        type: string
      ubuntu:
        type: boolean
    executor: base
    environment:
      # Required for building cross-platform images
      DOCKER_BUILDKIT: 1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: CI job started
          command: ./scripts/ci-job-started.sh
      - setup_remote_docker:
          # This version is necessary for building cross-platform images
          version: 18.09.3
      - install-grabpl
      - run:
          name: Install gcloud SDK
          command: |
            VERSION=298.0.0
            curl -fLO https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${VERSION}-linux-x86_64.tar.gz
            echo 0d58f451331abf43d080fa997c8e580d64897627e30be74f6d8f983ccfabef1e \
              google-cloud-sdk-${VERSION}-linux-x86_64.tar.gz | sha256sum --check --strict --status
            tar xf google-cloud-sdk-${VERSION}-linux-x86_64.tar.gz
            ./google-cloud-sdk/install.sh -q
      # XXX: Is this necessary?
      - run: docker run --privileged linuxkit/binfmt:v0.6
      - run:
          name: Copy Grafana archives
          command: |
            cp -r /tmp/workspace/oss/dist .
      - run:
          name: Build Docker images
          command: |
            source google-cloud-sdk/path.bash.inc
            if [[ -n $CIRCLE_TAG || $CIRCLE_BRANCH == "chore/test-release-pipeline" || $CIRCLE_BRANCH == "main" ]]; then
              # It's a full build
              /tmp/grabpl build-docker --jobs 4 --edition oss \
                --ubuntu=false
            else
              # We're testing a branch
              /tmp/grabpl build-docker --jobs 4 --edition oss \
                --ubuntu=false --archs amd64
            fi
      - run:
          name: Publish Docker images
          command: |
            if [[ $CIRCLE_BRANCH == "chore/test-release-pipeline" ]]; then
              # We're testing the release pipeline
              /tmp/grabpl publish-docker --jobs 4 --edition oss --ubuntu=false --dry-run
            elif [[ -n $CIRCLE_TAG ]]; then
              # This is a release
              /tmp/grabpl publish-docker --jobs 4 --edition oss --ubuntu=false
            else
              /tmp/grabpl publish-docker --jobs 4 --edition oss --ubuntu=false
            fi
      - run:
          name: CI job failed
          command: ./scripts/ci-job-failed.sh
          when: on_fail
      - run:
          name: CI job succeeded
          command: ./scripts/ci-job-succeeded.sh
          when: on_success

  end-to-end-tests:
    executor: e2e
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
          keys:
            - v2-yarn-{{ checksum "yarn.lock" }}
            # Used if checksum fails
            - v2-yarn-
      - run:
          name: yarn install
          command: yarn install --frozen-lockfile --no-progress
          no_output_timeout: 5m
      - save_cache:
          key: v2-yarn-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: Copy artifacts from workspace
          command: |
            mkdir -p dist
            cp -r /tmp/workspace/oss/dist/*.tar.gz dist/
      - run:
          name: Start grafana-server
          command: ./e2e/start-server
          background: true
      - run:
          name: "Wait for Grafana to start"
          command: './e2e/wait-for-grafana'
      - run:
          name: Run end-to-end tests
          command: ./e2e/run-suite
          no_output_timeout: 5m
      - store_artifacts:
          path: e2e/suite1/screenshots
          destination: screenshots
      - store_artifacts:
          path: e2e/suite1/videos
          destination: output-videos
      - store_artifacts:
          path: e2e/tmp/data/log
          destination: logs

  postgres-integration-test:
    docker:
      - image: cimg/go:1.14
      - image: circleci/postgres:9.3-ram
        environment:
          POSTGRES_USER: grafanatest
          POSTGRES_PASSWORD: grafanatest
          POSTGRES_DB: grafanatest
    steps:
      - checkout
      - run:
          name: ci job started
          command: "./scripts/ci-job-started.sh"
      - run: sudo apt update
      - run: sudo apt install -y postgresql-client
      - run: dockerize -wait tcp://127.0.0.1:5432 -timeout 120s
      - run: "PGPASSWORD=grafanatest psql -p 5432 -h 127.0.0.1 -U grafanatest -d grafanatest -f devenv/docker/blocks/postgres_tests/setup.sql"
      - run:
          name: postgres integration tests
          command: "./scripts/circle-test-postgres.sh"
      - run:
          name: ci job failed
          command: "./scripts/ci-job-failed.sh"
          when: on_fail
      - run:
          name: ci job succeeded
          command: "./scripts/ci-job-succeeded.sh"
          when: on_success

  codespell:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run:
          name: Install codespell
          command: "pip install codespell"
      - run:
          # Important: all words have to be in lowercase, and separated by "\n".
          name: exclude known exceptions
          command: 'echo -e "unknwon\nreferer\nerrorstring\neror\niam\nwan\ntrough" > words_to_ignore.txt'
      - run:
          name: check documentation spelling errors
          command: "codespell -I ./words_to_ignore.txt docs/" 

  scan-docker-image:
    description: "Scans a docker image for vulnerabilities using trivy"
    parameters:
      image:
        type: string
      tag:
        type: string
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker
      - restore_cache:
          key: vulnerability-db
      - run:
          name: Install trivy
          command: |
            VERSION=$(
                curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | \
                grep '"tag_name":' | \
                sed -E 's/.*"v([^"]+)".*/\1/'
            )

            wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
            tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
            sudo mv trivy /usr/local/bin
      - run:
          name: Clear trivy cache
          command: trivy --clear-cache
      - run:
          name: Scan Docker image for unkown/low/medium vulnerabilities
          command: trivy --exit-code 0 --severity UNKNOWN,LOW,MEDIUM << parameters.image >>:<< parameters.tag >>
      - run:
          name: Scan Docker image for high/critical vulnerabilities
          command: trivy --exit-code 1 --severity HIGH,CRITICAL << parameters.image >>:<< parameters.tag >>
      - save_cache:
          key: vulnerability-db
          paths:
            - $HOME/.cache/trivy

workflows:
  build-pipeline:
    jobs:
      - build-backend:
          filters: *filter-main-or-release
          edition: oss
          variant: armv6
          name: build-oss-backend-armv6
      - build-backend:
          filters: *filter-main-or-release
          edition: oss
          variant: armv7
          name: build-oss-backend-armv7
      - build-backend:
          filters: *filter-main-or-release
          edition: oss
          variant: armv7-musl
          name: build-oss-backend-armv7-musl
      - build-backend:
          filters: *filter-main-or-release
          edition: oss
          variant: arm64
          name: build-oss-backend-arm64
      - build-backend:
          filters: *filter-main-or-release
          edition: oss
          variant: arm64-musl
          name: build-oss-backend-arm64-musl
      - build-backend:
          filters: *filter-main-or-release
          edition: oss
          variant: osx64
          name: build-oss-backend-osx64
      - build-backend:
          filters: *filter-main-or-release
          edition: oss
          variant: linux-x64
          name: build-oss-backend-linux-x64
      - build-backend:
          filters: *filter-main-or-release
          edition: oss
          variant: linux-x64-musl
          name: build-oss-backend-linux-x64-musl
      - build-frontend:
          filters: *filter-main-or-release
          name: build-oss-frontend
          edition: oss
      - build-plugins:
          filters: *filter-main-or-release
          name: build-oss-plugins
          edition: oss
      - build-release-publisher:
          filters: *filter-main-or-release
      - codespell:
          filters: *filter-main-or-release
      - shellcheck:
          filters: *filter-main-or-release
      - postgres-integration-test:
          filters: *filter-main-or-release
      - package-oss:
          filters: *filter-main-or-release
          requires:
            - build-oss-backend-armv6
            - build-oss-backend-armv7
            - build-oss-backend-armv7-musl
            - build-oss-backend-arm64
            - build-oss-backend-arm64-musl
            - build-oss-backend-osx64
            - build-oss-backend-linux-x64
            - build-oss-backend-linux-x64-musl
            - build-oss-frontend
            - codespell
            - shellcheck
            - build-oss-plugins
      - build-docker-images:
          filters: *filter-main-or-release
          name: build-oss-docker-images
          edition: oss
          requires:
            - end-to-end-tests
            - postgres-integration-test
            - package-oss
      - end-to-end-tests:
          filters: *filter-main-or-release
          requires:
            - package-oss

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters: *filter-only-main
    jobs:
      - scan-docker-image:
          matrix:
            parameters:
              image: [grafana/grafana]
              tag: [latest, main]

